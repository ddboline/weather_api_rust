name: Rust

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12.4-alpine
        env:
          POSTGRES_DB: weather_db
          POSTGRES_PASSWORD: 2UtcMAAvNuBHPqK9
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Install deps
      run: |
        rustup update
        rustup target add wasm32-unknown-unknown
        cargo install trunk
        sudo apt-get update
        sudo apt-get install -y libpango1.0-dev libsoup2.4-dev libatk1.0-dev \
            libgdk-pixbuf2.0-dev libgdk3.0-cil-dev libgtk-3-dev \
            libappindicator3-dev libwebkit2gtk-4.0-dev

    - name: Clippy
      run: |
        cargo clippy -- -W clippy::pedantic && \
        cd weather_api_wasm && cargo clippy -- -W clippy::pedantic && cd ../

    - name: Outdated
      run: |
        cargo install cargo-outdated && \
        cargo outdated -d2 && \
        cd weather_api_wasm && cargo outdated -d2 && cd ../

    - name: Unused Deps
      run: |
        rustup update nightly && \
        cargo +nightly install cargo-udeps && \
        cargo +nightly udeps && \
        cd weather_api_wasm && cargo +nightly udeps && cd ../

    - name: Build
      run: |
        cargo build && \
        ./target/debug/weather-api-rust run-migrations
      env:
        API_KEY: ${{secrets.API_KEY}}
        API_ENDPOINT: api.openweathermap.org
        DATABASE_URL: postgresql://postgres:2UtcMAAvNuBHPqK9@localhost:5432/weather_db


    - name: Run tests
      run: |
        cargo test && \
        cargo install cargo-tarpaulin && \
        cargo tarpaulin --all-features --out xml
      env:
        API_KEY: ${{secrets.API_KEY}}
        API_ENDPOINT: api.openweathermap.org
        DATABASE_URL: postgresql://postgres:2UtcMAAvNuBHPqK9@localhost:5432/weather_db

    - name: Upload to codecov.io
      uses: codecov/codecov-action@v2.1.0
      with:
        token: ${{secrets.CODECOV_TOKEN}}

    - name: Archive code coverage results
      uses: actions/upload-artifact@v1
      with:
        name: code-coverage-report
        path: cobertura.xml
